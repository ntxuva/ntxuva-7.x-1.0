<?php
/**
 * @file
 * Implementation of hook_rest_server_response_formatters_alter
 * http://drupal.org/node/1588044
 */

/**
 * Implements hook_rest_server_response_formatters_alter().
 */
function markaspot_open311_rest_server_response_formatters_alter(&$formatters) {
  $formatters['xml']['formatter class'] = 'Open311XMLFormatter';
  $formatters['xml']['view'] = 'RESTServerViewOpen311';
  $formatters['xml']['mime types'][0] = 'text/xml';
  $formatters['json']['mime types'][0] = 'application/json';
}

class Open311XMLFormatter implements ServicesFormatterInterface {

  /**
   * Rendering data as Open311 Specific when XML format is requested.
   *
   * @param array $data
   *   The data array
   *
   * @return string
   *   The XML Tree
   */
  public function render($data) {

    if (!is_array($data)) {
      $message = $data;
      $data = array();
      $data[0] = array("code" => "500", "message" => $message);
    }

    $doc = new DOMDocument('1.0', 'utf-8');
    $root = new stdClass();
    // Only change root, if there is GeoReport output data:
    if (array_key_exists('endpoints', $data)) {
      $root = $doc->createElement('discovery');
    }
    if (isset($data[0])) {
      if (array_key_exists('code', $data[0])) {
        $root = $doc->createElement('errors');
      }
      if (array_key_exists('service_code', $data[0])) {
        $root = $doc->createElement('services');
      }
      if (array_key_exists('service_request_id', $data[0])) {
        $root = $doc->createElement('service_requests');
      }
      if (array_key_exists('discovery', $data[0])) {
        $root = $doc->createElement('discovery');
      }
      if (array_key_exists('service_notice', $data[0])) {
        $root = $doc->createElement('service_requests');
      }
    }
    $doc->appendChild($root);
    $this->xmlRecurse($doc, $root, $data);

    return $doc->saveXML();
  }

  /**
   * Checking data against Open311 Specification and creating elements.
   *
   * @param object $doc
   *   The doc object
   * @param string $parent
   *   The parent element
   * @param object $data
   *   The element
   */
  protected function xmlRecurse(&$doc, &$parent, $data) {
    if (is_object($data)) {
      $data = get_object_vars($data);
    }

    if (is_array($data)) {

      $assoc = FALSE || empty($data);
      foreach ($data as $key => $value) {
        if (is_numeric($key)) {

          // Mark-a-Spot Integration
          // Instead of "items" geoReport v2 requires an "request" or
          // "service"-element for arrays.
          $key = 'item';
          if (array_key_exists('code', $data[0])) {
            $key = 'error';
          }

          if (array_key_exists('error', $data[0])) {
            $key = 'errors';
          }
          if (array_key_exists('service_code', $data[0])) {
            $key = 'service';
          }
          if (array_key_exists('status', $data[0])) {
            $key = 'request';
          }
          // After Posting:
          if (array_key_exists('service_notice', $data[0])) {
            $key = 'request';
          }
          if (in_array('xml', $data)) {
            $key = 'format';
          }
        }
        else {
          $assoc = TRUE;
          $key = preg_replace('/[^A-Za-z0-9_]/', '_', $key);
          $key = preg_replace('/^([0-9]+)/', '_$1', $key);
        }
        $element = $doc->createElement($key);
        $parent->appendChild($element);
        $this->xmlRecurse($doc, $element, $value);
      }

      if (!$assoc) {
        $parent->setAttribute('is_array', 'true');
      }
    }
    elseif ($data !== NULL) {
      $parent->appendChild($doc->createTextNode($data));
    }
  }
}


/**
 * Access callback for open311 requests.
 *
 * @param string $op
 *   The operation that's going to be performed.
 * @param array $args
 *   The arguments that will be passed to the callback.
 *
 * @return bool
 *   Whether access is given or not.
 */
function _markaspot_open311_access($op, $args) {
  global $user;
  $access = FALSE;

  switch ($op) {
    case 'view':
      $access = user_access('access content');
      break;

    case 'create':
      $access = user_access('create report content');
      break;
  }

  return $access;
}

/**
 * Gets a request object by id.
 *
 * @param int $id
 *   The request id
 *
 * @return object
 *   An object containing the node object.
 */
function markaspot_open311_get_requests($id) {
  return db_query('SELECT * FROM {node} WHERE nid=:id', array(':id' => $id))
    ->fetchAll();
}

/**
 * Writes a request to the database.
 *
 * @param object $node
 *   The node object
 */
function markaspot_open311_write_request($node) {
  node_save($node);
}

/**
 * Deletes a request from the database.
 *
 * @param int $id
 *   The node id
 */
function markaspot_open311_delete_requests($id) {
  db_query('DELETE FROM {node} WHERE id=:id', array(':id' => $id));
}

/**
 * Implements hook_services_resources().
 */
function markaspot_open311_services_resources() {
  return array(
    'people' => array(
         /**
         * @api {get} /people/:service_request_id List people that need to be notified when a request is updated
         * @apiName Open311
         * @apiGroup People
         */
        'retrieve' => array(
          'help' => 'List of people to be notified by neighbourhood',
          'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
          'callback' => 'markaspot_open311_people_retrieve',
          'access callback' => '_markaspot_open311_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'The id of the request to get',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'parameters',
              'type' => 'array',
              'description' => '',
              'source' => 'param',
              'optional' => TRUE,
              'default value' => array(),
            ),
          ),
        ),
    ),
    'locations' => array(
        /**
         * @api {get} /locations List locations
         * @apiName Open311
         * @apiParam {String} [district] District
         * @apiParam {String} [neighbourhood] Neighbourhood
         * @apiParam {String} [type] Type of Location (container, district, quarter)

         * @apiSuccess {Number} location_id  Id of Location
         * @apiSuccess {String} location_name  Location Name
         * @apiSuccess {String} location_type  Location Type (container, district, quarter)
         * @apiSuccess {String} lat  Latitude
         * @apiSuccess {String} long  Longitude
         * @apiSuccess {String} district  District
         * @apiSuccess {Array} neighbourhood  Array of Neighbourhoods

         * @apiSuccessExample {json} Success-Response:
           [
            {
            "location_id": "1",
            "location_name": "KaMubukwana",
            "location_type": "district",
            "lat": "-25.87634",
            "long": "32.57911",
            "district": "KaMubukwana",
            "neighbourhood": [
            "Zimpeto",
            "Bagamoyo",
            "Inhagoia A",
            "Inhagoia B",
            "Jardim",
            "George Dimitrov (Benfica)",
            "Luis Cabral",
            "Magoanine A",
            "Magoanine B",
            "Magoanine C",
            "Malhazine",
            "Nsalane",
            "25 de Junho A",
            "25 de Junho B"
            ]
            }
          ]

         * @apiGroup Locations
         */
        'index' => array(
          'help' => 'Provides locations for integration with VoIP Drupal and USSD',
          'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
          'callback' => 'markaspot_open311_ntxuva_locations',
          'access callback' => '_markaspot_open311_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'parameters',
              'type' => 'array',
              'description' => '',
              'source' => 'param',
              'optional' => TRUE,
              'default value' => array(),
            ),
	  ),
        ),
    ),
    'discovery' => array(
         /**
         * @api {get} /discovery Service discovery mechanism
         * @apiName Open311
         * @apiGroup Discovery
         */
      'index' => array(
        'help' => 'Provides specification for the service discovery mechanism',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => 'markaspot_open311_discovery',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(),
      ),
    ),
    'reopen' => array(
         /**
         * @api {put} /reopen/:phone_number Retrieves last request from phone number and reopens it
         * @apiName Open311
         * @apiGroup Requests
         */
      'update' => array(
        'help' => 'Retrieves last request from phone number and reopens it',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => 'markaspot_open311_reopen_request',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'phone',
            'type' => 'int',
            'description' => 'The phone number of the requester',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ),
      ),
    ),
    'requests' => array(
         /**
         * @apiDefine Requests  Requests
         *
         * An entity (e.g minicipal) responsible for addressing
         * service request(issue).
         *
         * It may be a self managed entity or division within another
         * entity(jurisdiction) in case there is hierarchy.
         */
      'retrieve' => array(
         /**
         * @api {get} /requests/:service_request_id Retrieves a request
         * @apiName Retrieve
         * @apiGroup Requests
         */
        'help' => 'Retrieves a request',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => 'markaspot_open311_requests_retrieve',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The id of the request to get',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ),
      ),
      'create' => array(
        /**
         * @api {post} /requests Creates a new request
         * @apiName Create
         * @apiGroup Requests
         */
        'help' => 'Creates an Open311 request',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => 'markaspot_open311_requests_create',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'source' => 'data',
            'type' => 'array',
            'description' => 'The request object',
            'optional' => TRUE,
          ),
        ),
      ),
      'update' => array(
        /**
         * @api {put} /requests/:service_request_id Updates a request status and validation
         * @apiName Update
         * @apiGroup Requests
         * @apiParam {String} [status] One the available statuses (Em processo, Inválido, Resolvido)
         * @apiParam {String} [validated] Validated by CMM >> True or False
         */
        'help' => 'Updates a request status and validation',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => 'markaspot_open311_update_request',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The id of the request to get',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'source' => 'data',
            'type' => 'array',
            'description' => 'The request object',
            'optional' => TRUE,
          ),
        ),
      ),
      'index' => array(
        /**
         * @api {get} /requests Retrieves a list of requests
         * @apiName Index
         * @apiGroup Requests
         */
        'help' => 'Retrieves a listing of requests',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        // Callback in inc.file
        'callback' => 'markaspot_open311_requests_index',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        'args' => array(
          array(
            'name' => 'page',
            'type' => 'int',
            'description' => '',
            'source' => array(
              'param' => 'page',
            ),
            'optional' => TRUE,
            'default value' => 0,
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ),
      ),
    ),
    'services' => array(
      'retrieve' => array(
        /**
         * @api {get} /services/:service_code Retrieves service request category
         * @apiName Retrieve
         * @apiGroup Services
         */
        'help' => 'Retrieves a service definition by servicecode (not yet implemented)',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => 'markaspot_open311_services_retrieve',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The service_code of the service to retrieve',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
        ),
      ),
      'index' => array(
        /**
         * @api {get} /services Lists all available services
         * @apiName Index
         * @apiGroup Services
         */


        'help' => 'Retrieves a listing of available services',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        // Callback in inc.file
        'callback' => 'markaspot_open311_services_index',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        'args' => array(
          array(
            'name' => 'pagesize',
            'optional' => TRUE,
            'type' => 'init',
            'description' => 'Number of records to get per page.',
            'default value' => variable_get('services_taxonomy_term_index_page_size', 20),
            'source' => array('param' => 'pagesize'),
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ),
      ),
    ),
  );
}
